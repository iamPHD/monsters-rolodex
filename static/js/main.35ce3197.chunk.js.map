{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/search-box.component.jsx","ClassComp.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","ClassComp","e","setState","searchField","target","value","state","console","log","fetch","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAAe,I,WCwBAA,ICZAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4BCJDQ,G,MAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAML,EAAMI,QAAQE,OACpB,4BAAIN,EAAMI,QAAQG,aCHbC,G,MAAW,SAACR,GAAD,OAAW,qBAAKC,UAAU,YAAf,SAA4BD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCAnGM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoEDG,E,kDApEd,aAAc,IAAD,8BACR,gBAmCLH,aAAe,SAAAI,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAjCnD,EAAKC,MAAQ,CACXb,SAAS,GACTU,YAAY,IALN,E,qDAcb,WAAoB,IAAD,OAClBI,QAAQC,IAAI,qEAEZC,MAAM,iDACLhC,MAAK,SAAAiC,GAIF,OAHmBA,EAASC,UAI/BlC,MAAK,SAAAmC,GAAK,OAAI,EAAKV,SAAS,CAACT,SAASmB,S,2BAOxC,SAAcX,GACXY,KAAKX,SAAS,CAACC,YAAYF,EAAEG,OAAOC,U,oBAQtC,WAAQ,MAE0BQ,KAAKP,MAA9Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YAMXW,EAAkBrB,EAASsB,QAAO,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,kBAUjG,OAJAT,QAAQC,IAAI,+EAKR,sBAAKvB,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcgB,KAAKhB,eAC5D,cAAC,EAAD,CAAUJ,SAAUqB,W,GA/DZI,aCAxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BjD,M","file":"static/js/main.35ce3197.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props)=>(\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=200x200`}></img>\r\n        <h2 >{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => <div className='card-list'>{props.monsters.map(monster =>(<Card key={monster.id} monster={monster}/>))}</div>;\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\n//Notice here instead of props, directly the name of properties is passed. Here again the concept of destructuring is applied\r\nexport const SearchBox = ({placeholder,handleChange})=>(\r\n    <input \r\n        className='search' \r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n    />\r\n    );\r\n\r\n    //e=>this.setState({searchField: e.target.value})\r\n    //","import React,{Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport {CardList} from './components/card-list/card-list.component';\r\nimport './App.css';\r\n\r\nimport {SearchBox} from './components/searchbox/search-box.component';\r\n\r\nclass ClassComp extends Component {\r\n\r\n   constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n          monsters:[],\r\n          searchField:''\r\n        };\r\n\r\n        //this.handleChange1 = this.handleChange1.bind(this);\r\n   }\r\n\r\n  /**\r\n   * This lifecycle method is called only once , initially after component is mounted/rendered on DOM\r\n   */\r\n   componentDidMount(){\r\n    console.log(\"*****************Component Did Mount is called***************\" + '<br>');\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/comments')\r\n    .then(response => { \r\n        let jsonResponse = response.json();\r\n        //console.log(\"--------JSON RESPONSE-------------------\");\r\n        //console.log(jsonResponse);\r\n        return jsonResponse})\r\n    .then(users => this.setState({monsters:users}))\r\n   }\r\n\r\n   //see here it is very important to set the context of this. I mean u have to bind this method to tell , 'this' points to which keyword or object\r\n   //This activity is done insde constructor, becoz 'this' has refrence to ClassComp in constructor\r\n   //this can be used directly in render() method or other lifecycle methods , bcoz they inherit from Component class, so in inherited methods 'this' will have reference\r\n   // BUt if u define custom javascript method, 'this' looses the context\r\n   handleChange1(e){\r\n      this.setState({searchField:e.target.value});\r\n   }\r\n\r\n   // context setting for this in handlechange1 can be avoided using arrow function. It does it automatically as we cannot call bind function on arrow functions\r\n   // this is set automatically to the conext in which it is defined\r\n   handleChange = e=>  this.setState({searchField:e.target.value});\r\n\r\n   //Note that after change in state is detected , render method is called every time\r\n    render(){\r\n      // Below statement in destructuring concept\r\n      const {monsters, searchField} = this.state;\r\n      /**\r\n       * Above statment is equivalent to\r\n       * const monsters = this.state.monsters;\r\n       * const searchField = this.state.searchField;\r\n       */\r\n      const filteredMonsters= monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n      //console.log(\"*************filteredMonsters********\" + filteredMonsters)\r\n\r\n      \r\n\r\n        \r\n        console.log(\"************************render method is called************************\"  + '<br>')\r\n        //returning an expression, return is not a method here\r\n        //Note we just assgin a function in eventhandlinge.g. this.handleChange so that it gets called only when event occurs.\r\n        //If we write it like this.handleChange() then it will get executed automatically while render function gets called\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Monsters Rolodex</h1>\r\n                <SearchBox placeholder='search monsters' handleChange={this.handleChange}/>\r\n                <CardList monsters={filteredMonsters} /> \r\n            </div>\r\n          );\r\n    }\r\n    \r\n  }\r\n\r\n  export default ClassComp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ClassComp from './ClassComp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ClassComp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}